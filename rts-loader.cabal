name:                rts-loader
version:             0.1.0.0
synopsis:            Dynamically load Haskell libraries

description:
 Load and execute functions from Haskell dynamic libraries without being
 restricted to a single RTS/GHC version.
 .
 This package consists of the initial loader executable "@rts-loader@" written
 in plain C and a Haskell library providing a convinient interface to it. The
 initial loader executable is implemented in C since writing it in Haskell would
 mean linking against the RTS which means we can't load libraries compiled with
 another version of GHC.
 .
 In order to get Cabal to compile a pure C executable while not linking against
 the RTS still some hacks in @Setup.hs@ are employed to call @gcc@ directly so
 beware.
 .
 == Usage
 .
 The example below will locate the package "foopkg" in the package databases
 configured for the Cabal project in the current directory and execute the
 function "main" from the module \"Lib\". The package can be found in
 @tests/lib@ in the rts-loader source tree.
 .
 To run the example, execute the following commands in the rts-loader source
 tree.
 .
 @
 $ cabal install --only-dependencies && cabal configure && cabal build && cabal install tests/lib
 $ rts_loader_libexecdir=dist\/build\/rts-loader dist\/build\/rts-loader-example\/rts-loader-example
 @
 .
  "@rts_loader_libexecdir@" is only required if
 you didn't install rts-loader into a sandbox or elsewhere already.
 .
 > import System.Loader.RTS
 > import System.Process
 >
 > import Distribution.Verbosity
 > import Distribution.Package
 > import Distribution.Simple.Configure
 >
 > import Distribution.Simple.LocalBuildInfo
 > import Distribution.Simple.Configure (getPersistBuildConfig)
 >
 > main :: IO ()
 > main = do
 >   lbi <- getPersistBuildConfig "dist"
 >
 >   let verbosity = normal
 >       comp = compiler lbi
 >       pkg_db_stack = withPackageDB lbi
 >       prog_conf = withPrograms lbi
 >
 >   pidx <- getInstalledPackages verbosity comp pkg_db_stack prog_conf
 >
 >   loader_exe <- loaderExecutablePath
 >   loader_args <- loaderInvocation (SymbolIdentifier "Lib" "main") [] <$>
 >     (resolveLibraryInfo comp [WayDyn] $
 >       lookupLibraryInfo pidx $
 >         PQName $ PackageName "foopkg")
 >
 >   print =<< rawSystem loader_exe loader_args
 .
 We use information written by @cabal configure@ (see @getPersistBuildConfig@)
 for convinience only this is not actually required to use the loader.


license:             GPL-3
license-file:        LICENSE
license-files:       LICENSE LICENSE.GHC
author:              Daneil Gröber
maintainer:          dxld@darkboxed.org
copyright:           Copyright (C) 2016  Daniel Gröber
category:            Distribution
cabal-version:       >= 1.24.0.0
build-type:          Custom
extra-source-files:  ChangeLog.md, README.md
tested-with:         GHC == 7.10.3, GHC == 8.0.1

library
  exposed-modules:   System.Loader.RTS
  other-modules:     Paths_rts_loader,
                     GHC.Way
  default-language:  Haskell2010
  build-depends:     base      < 4.10 && >= 4.8.0.0,
                     zenc      == 0.1.1,
                     unix      < 2.8  && >= 2.7.1.0,
                     filepath  < 1.5  && >= 1.4.0.0,
                     directory < 1.3  && >= 1.2.2.0,
                     Cabal     < 1.25 && >= 1.24.0.0

executable rts-loader
  main-is:           rts-loader.c
  x-install-dir:     $libexecdir
  -- PR pending: https://github.com/haskell/cabal/pull/3461
  -- install-dir:       $libexecdir
  default-language:
                     -- Not really, it's C actually. See Setup.hs
                     Haskell98

executable rts-loader-example
  main-is:           Example.hs
  default-language:  Haskell2010
  hs-source-dirs:    src

  build-depends:     base      < 4.10 && >= 4.8.0.0,
                     Cabal     < 1.25 && >= 1.24.0.0,
                     process   < 1.5  && >= 1.2.3.0,
                     rts-loader

custom-setup
  setup-depends:     base      < 4.10 && >= 4.8.0.0,
                     filepath  < 1.5  && >= 1.4.0.0,
                     Cabal     < 1.25 && >= 1.24.0.0

source-repository head
  type:              git
  location:          https://github.com/DanielG/ghc-mod.git
